COMP9319 Assignment 3: Data Compression and Web Search
You will have three tasks in this assignment. They are:

    Create an encoder that encode a given XML file into your own encoded (and compressed) format.
    Create a simple query processor that implements a very small subset of XPath, which can efficiently search the XML file in your encoded format.
    Implement a decoder that will decode the data from your encoded format back to the original XML file, and the decoded file should be identical to the original given file.

All these tasks are to be implemented in Java and will be marked using automarking on CSE Linux machines (e.g. wagner). You may use the SAX or DOM parser from Java, but you should not use any external Java libraries.
Test dataset
Some test datasets will be placed at ~cs9319/project/a3.

You can assume that the largest dataset that your code will be tested on is 50MB.
Encode
The encoder you need to implement is called a3encode , which accepts two commandline arguments:

java -Xmx256m a3encode FILE.xml PATH

where FILE.xml is the filename of the given XML file to be encoded, and PATH (e.g., /home/cs9319/testfolder/a3) is a path to a directory where you should write out all your encoded files. It is a requirement that the total size of all the encoded files you generate, should be at least 20% smaller than the given XML file. The largest test file is provided at ~cs9319/project/a3. Each test for a3encode will be run with 256MB Java heap size and the maximum runtime you are given is 180 sec.

For each input XML file, if the total size of the encoded files generated by a3encode is > 80% of the size of the input XML file, you will receive zero marks for all the tests (including encode, search and decode) relating to that input XML file.

Similarly, if your solution fails to generate the encoded files within the maximum heap size and runtime limit specified above, you will receive zero marks for the corresponding search tests (since we will not have your encoded files to perform the search tests).
Decode
The encoder that you implement should be lossless. Therefore, in this task, you need to implement a corresponding decoder called a3decode , which accepts two commandline arguments:

java -Xmx128m a3decode PATH FILE.xml

where PATH (e.g., /home/cs9319/testfolder/a3) is the path to a directory where all the files that were written out by your a3encode program are located, and FILE.xml is the filename of the resulting decoded XML file.

It is a requirement that the generated XML file is identical to the original XML file before encoding. Each decoding test will be run with 128MB Java heap size and the maximum runtime you are given is 90 sec.
Search
You will implement a small, cut-down version of an XPath query processor called a3search in this task. The XPath EBNF that you will have to support is shown below.

XPath EBNF

    <XPath> ::= (<PathAtom> <Predicate>?)+
    <PathExpr> ::= (<ElementName> | '*') <PathAtom>*
    <PathAtom> ::= '/' (<ElementName> | '*')
    <ElementName> ::= [A-Za-z_] [A-Za-z_0-9]*
    <Predicate> ::= '[' <PathExpr> '~' '"' <TextValue> '"' ']'
    <TextValue> ::= any visible ASCII value excluding "

We define the ~ operator, which performs a case-sensitive substring match. <PathExpr> will always select zero or more XML element nodes, where each selected XML element node has only one child, which is an XML text node. If there exists at least one element node in <PathExpr> that satisfies the ~ operator, the predicate evaluates to true. To reduce the workload for this assignment, you do not need to output the XML query result. Instead, you should output the number of XML text nodes that will appear in the XML query result.

a3search accepts two commandline arguments:

java -Xmx128m a3search PATH XPath

where PATH (e.g., /home/cs9319/testfolder/a3) is the path to a directory where all the files that were written out by your a3encode program are located, and XPath is the xpath expression that conforms to the EBNF above.

Each decoding test will be run with 128MB Java heap size and maximum runtime you are given is 90 sec.

For example,

java -Xmx128m a3search /home/cs9319/test123/tmpfile "/a/b/c[d~\"123\"]"

As another example, given the XML file:

    <Books>
        <Book>
            <Title>Alice In Wonderland</Title>
        </Book>
        <Book>
            <Title>Romeo and Juliet</Title>
        </Book>
        <Book>
            <Title>Cinderella</Title>
        </Book>
    </Books>

The XPath /Books/Book[Title~"and"] will return:

2

Refer to the XPath specification for the semantics of the rest of the XPath components listed above.
Compile
We will use the commands below to compile your solution. Please ensure that the code you submit can be compiled. Solutions that have compilation errors will recieve zero points for the entire assignment.

    javac -d classes *.java

Your solution will be compiled and run on a typical CSE machine e.g. wagner.
Documentation
You will be marked on a description of your encoding and search mechanism in a README.txt file, as well as your documentation of your classes, methods and steps in your solution. Documentation is to be provided in JavaDoc form. Your source code will also be inspected and marked based on readability and ease of understanding.
Assumptions/clarifications/hints

    There will be no whitespace in the XPath, except in <TextValue>.
    Except for text values (i.e., values of XML text nodes), whitespace will be removed from the XML test files. There will be whitespace in text values and hence your search should be whitespace sensitive. i.e., "car " should not match "carmaker".
    You can assume that the maximum number of results (i.e., number of XML text nodes) returned for a test query is < 10,000.
    There are several requests regarding the use of standard Java library APIs such as XML parser and some compression functions. You may use those functions if needed. Please clearly document and justify in your README file if you do so.
    You cannot assume unlimited space if you need to generate some temporary files. For each dataset to test, you can use maximum doubled amount of the test file space for temporary files. E.g., for a 50MB test file, there will be 100MB file space for temp files and encoded files, etc. all together. You are also responsible to clean up any temporary files before your program terminates to ensure that they will not be counted as the encoded files. 

Marking
This assignment is worth 100 points. Below is an indicative marking scheme:
Component	Points
Auto marking 	80
Documentation 	20
Bonus
Bonus marks (up to 10 points) will be awarded to the top 3 students who have passed all the test cases and achieved the best search speed (the total time to run all the test cases for search). Bonus marks (up to 10 points) will also be awarded to the top 3 students who have passed all the test cases and achieved the best compression ratio (produce the smallest total size of all the encoded files for all the test datasets).
Submission
Deadline: Thursday 24th May 23:59. Late submission will attract 10% penalty for the first day and 30% penalty for each subsequent day. Use the give command below to submit the assignment:

    give cs9319 a3 *.java README.txt

Plagiarism
The work you submit must be your own work. Submission of work partially or completely derived from any other person or jointly written with any other person is not permitted. The penalties for such an offence may include negative marks, automatic failure of the course and possibly other academic discipline. Assignment submissions will be examined both automatically and manually for such submissions.

Relevant scholarship authorities will be informed if students holding scholarships are involved in an incident of plagiarism or other misconduct.

Do not provide or show your assignment work to any other person - apart from the teaching staff of this subject. If you knowingly provide or show your assignment work to another person for any reason, and work derived from it is submitted you may be penalized, even if the work was submitted without your knowledge or consent. This may apply even if your work is submitted by a third party unknown to you.
